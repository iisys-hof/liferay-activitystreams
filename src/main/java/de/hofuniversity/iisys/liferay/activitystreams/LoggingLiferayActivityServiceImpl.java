package de.hofuniversity.iisys.liferay.activitystreams;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.Writer;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

//import com.liferay.asset.kernel.model.AssetCategory;
//import com.liferay.asset.kernel.model.AssetEntry;
//import com.liferay.asset.kernel.model.AssetTag;
import com.liferay.blogs.kernel.model.BlogsEntry;
import com.liferay.blogs.kernel.service.BlogsEntryLocalServiceUtil;
import com.liferay.bookmarks.social.BookmarksActivityKeys;
import com.liferay.document.library.kernel.service.DLAppLocalServiceUtil;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.journal.social.JournalActivityKeys;
import com.liferay.message.boards.kernel.model.MBMessage;
import com.liferay.message.boards.kernel.model.MBThread;
import com.liferay.message.boards.kernel.service.MBMessageLocalServiceUtil;
import com.liferay.message.boards.kernel.service.MBThreadLocalServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.Company;
import com.liferay.portal.kernel.model.Group;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.repository.model.FileEntry;
import com.liferay.portal.kernel.service.CompanyLocalServiceUtil;
import com.liferay.portal.kernel.service.GroupLocalServiceUtil;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.social.kernel.model.SocialActivity;
import com.liferay.social.kernel.model.SocialActivityConstants;
import com.liferay.social.kernel.model.SocialActivityFeedEntry;
import com.liferay.social.kernel.service.SocialActivityInterpreterLocalServiceUtil;
import com.liferay.social.kernel.service.SocialActivityLocalService;
import com.liferay.social.kernel.service.SocialActivityLocalServiceWrapper;
import com.liferay.wiki.model.WikiNode;
import com.liferay.wiki.model.WikiPage;
import com.liferay.wiki.model.WikiPageResource;
import com.liferay.wiki.service.WikiNodeLocalServiceUtil;
import com.liferay.wiki.service.WikiPageLocalServiceUtil;
import com.liferay.wiki.service.WikiPageResourceLocalServiceUtil;
import com.liferay.wiki.social.WikiActivityKeys;

/**
 * Social activity service logging out social activities generated by Liferay's own
 * evaluators.
 * Caution: It is not always forwarding activities to Liferay's original implementation
 * 		anymore.
 */
public class LoggingLiferayActivityServiceImpl extends SocialActivityLocalServiceWrapper
{
	private static final String LIFERAY_URL = "liferay_url";
	
	private static final String LOG_FILE = "liferay_activities_log";
    
	private final Writer fWriter;
	
	private final String fServiceURL;
	
    private final Map<String, String> fProperties;
	
	private final ServiceContext fContext;
	private final ThemeDisplay fThemeDisplay;
	
	public LoggingLiferayActivityServiceImpl(SocialActivityLocalService socialService,
			Map<String, String> properties)
		throws Exception
	{
		super(socialService);
		
		fProperties = properties;

		fWriter = new BufferedWriter(new FileWriter(fProperties.get(LOG_FILE)));
		
		fServiceURL = fProperties.get(LIFERAY_URL);
		
		Runtime.getRuntime().addShutdownHook(new Thread()
		{
			@Override
			public void run()
			{
				try
				{
					fWriter.flush();
					fWriter.close();
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
		});
		
		fContext = new ServiceContext();
		fThemeDisplay =  new ThemeDisplay();
	}
	
	
	//output methods
	private String getIndent(int depth)
	{
		String indent = "";
		
		while(--depth >= 0)
		{
			indent += "\t";
		}
		
		return indent;
	}
	
	private void writeMap(Map<?, ?> map, int indent) throws Exception
	{
		final String tabs = getIndent(indent);
		
		for(Entry<?, ?> mapE : map.entrySet())
		{
			fWriter.write(tabs + mapE.getKey() + ": " + mapE.getValue() + "\r\n");
		}
	}
	
	private void writeExpandoBridge(ExpandoBridge bridge, int indent) throws Exception
	{
		final String tabs = getIndent(indent);
		
		fWriter.write(tabs + "className: " + bridge.getClassName() + "\r\n");
		fWriter.write(tabs + "classPK: " + bridge.getClassPK() + "\r\n");
		
		fWriter.write(tabs + "companyId: " + bridge.getCompanyId() + "\r\n");
		fWriter.write(tabs + "--->company:\r\n");
		writeCompany(bridge.getCompanyId(), indent + 1);
		
		if(bridge.getAttributes() != null &&  bridge.getAttributes().isEmpty())
		{
			fWriter.write(tabs + "attributes:\r\n");
			writeMap(bridge.getAttributes(), indent + 1);
		}
	}
	
	public void writeActivityFeedEntry(SocialActivity activity,
			int indent) throws Exception
	{
		if(activity == null)
		{
			return;
		}
		
		final String tabs = getIndent(indent);
		
		fContext.setScopeGroupId(activity.getGroupId());
		
		//TODO: probably not right
		SocialActivityFeedEntry entry = SocialActivityInterpreterLocalServiceUtil.interpret(
				"default", activity, null);
		
		final String className = activity.getClassName();
		
		//message boards
		if("com.liferay.portlet.messageboards.model.MBThread".equals(className))
		{
//			entry = new MBThreadActivityInterpreter().interpret(activity, fContext);
		}
		if("com.liferay.portlet.messageboards.model.MBMessage".equals(className))
		{
//			entry = new MBMessageActivityInterpreter().interpret(activity, fContext);
		}
		//journal
		else if("com.liferay.portlet.journal.model.JournalArticle".equals(className))
		{
//			entry = new JournalArticleActivityInterpreter().interpret(activity, fContext);
		}
		else if("com.liferay.portlet.journal.model.JournalFolder".equals(className))
		{
//			entry = new JournalFolderActivityInterpreter().interpret(activity, fContext);
		}
		//bookmarks
		else if("com.liferay.portlet.bookmarks.model.BookmarksEntry".equals(className))
		{
//			entry = new BookmarksEntryActivityInterpreter().interpret(activity, fContext);
		}
		else if("com.liferay.portlet.bookmarks.model.BookmarksFolder".equals(className))
		{
//			entry = new BookmarksFolderActivityInterpreter().interpret(activity, fContext);
		}
		//blogs
		else if("com.liferay.portlet.blogs.model.BlogsEntry".equals(className))
		{
//			entry = new BlogsActivityInterpreter().interpret(activity, fContext);
		}
		//document library
		else if("com.liferay.portlet.documentlibrary.model.DLFileEntry".equals(className))
		{
//			entry = new DLFileEntryActivityInterpreter().interpret(activity, fContext);
		}
		else if("com.liferay.portlet.documentlibrary.model.DLFolder".equals(className))
		{
//			entry = new DLFolderActivityInterpreter().interpret(activity, fContext);
		}
		//wiki
		else if("com.liferay.portlet.wiki.model.WikiPage".equals(className))
		{
//			entry = new WikiActivityInterpreter().interpret(activity, fContext);
		}
		else
		{
			fWriter.write(tabs + "unknown class: " + className + "\r\n");
		}

		if(entry != null)
		{
			fWriter.write(tabs + "title: " + entry.getTitle() + "\r\n");
			fWriter.write(tabs + "body: " + entry.getBody() + "\r\n");
			fWriter.write(tabs + "link: " + entry.getLink() + "\r\n");
			fWriter.write(tabs + "portletId: " + entry.getPortletId() + "\r\n");
		}
		
		final int type = activity.getType();
		
		//message boards
		if("com.liferay.portlet.messageboards.model.MBThread".equals(className))
		{
			MBThread thread = MBThreadLocalServiceUtil.fetchThread(
					activity.getClassPK());
			MBMessage message = MBMessageLocalServiceUtil.fetchMBMessage(
					thread.getRootMessageId());
			
			fWriter.write(tabs + "category link: " + fServiceURL
					+ "/message_boards/find_category?mbCategoryId=" + thread.getCategoryId()
					+ "\r\n");
			
			fWriter.write(tabs + "message link: " + fServiceURL
					+ "/message_boards/find_message?messageId=" + activity.getClassPK()
					+ "\r\n");
			
//			if(MBActivityKeys.ADD_MESSAGE == type)
			if(1 == type)
			{
				fWriter.write(tabs + "type: thread added\r\n");
			}
//			else if(MBActivityKeys.REPLY_MESSAGE == type)
			else if(2 == type)
			{
				fWriter.write(tabs + "type: reply thread\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown thread event " + type + "\r\n");
			}
		}
		if("com.liferay.portlet.messageboards.model.MBMessage".equals(className))
		{
			MBMessage message = MBMessageLocalServiceUtil.fetchMBMessage(
					activity.getClassPK());
			
			fWriter.write(tabs + "category link: " + fServiceURL
					+ "/message_boards/find_category?mbCategoryId=" + message.getCategoryId()
					+ "\r\n");
			
			fWriter.write(tabs + "message link: " + fServiceURL
					+ "/message_boards/find_message?messageId=" + activity.getClassPK()
					+ "\r\n");
			
//			if(MBActivityKeys.ADD_MESSAGE == type)
			if(1 == type)
			{
				fWriter.write(tabs + "type: message added\r\n");
			}
//			else if(MBActivityKeys.REPLY_MESSAGE == type)
			else if(2 == type)
			{
				fWriter.write(tabs + "type: reply added to message\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown message event " + type + "\r\n");
			}
		}
		//journal
		else if("com.liferay.portlet.journal.model.JournalArticle".equals(className))
		{
			//TODO: how to use fetch method instead?
//			JournalArticle article = JournalArticleLocalServiceUtil.getLatestArticle(
//					activity.getClassPK());
//		
//			fWriter.write(tabs + "url title: " + article.getUrlTitle() + "\r\n");
//		
//			fWriter.write(tabs + "article link: " + fServiceURL
//				+ "/journal/find_article?articleId=" + activity.getClassPK()
//				+ "\r\n");
//			
			if(JournalActivityKeys.ADD_ARTICLE == type)
			{
				fWriter.write(tabs + "type: article added to journal\r\n");
			}
			else if(JournalActivityKeys.UPDATE_ARTICLE == type)
			{
				fWriter.write(tabs + "type: journal article updated\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown journal article event " + type + "\r\n");
			}
		}
		else if("com.liferay.portlet.journal.model.JournalFolder".equals(className))
		{
			fWriter.write(tabs + "article link: " + fServiceURL
				+ "/journal/find_folder?folderId=" + activity.getClassPK()
				+ "\r\n");
			
			if(JournalActivityKeys.ADD_ARTICLE == type)
			{
				fWriter.write(tabs + "type: article added to journal folder\r\n");
			}
			else if(JournalActivityKeys.UPDATE_ARTICLE == type)
			{
				fWriter.write(tabs + "type: journal article updated in folder\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown journal folder event " + type + "\r\n");
			}
			
		}
		//bookmarks
		else if("com.liferay.portlet.bookmarks.model.BookmarksEntry".equals(className))
		{
			fWriter.write(tabs + "bookmark entry link: " + fServiceURL
					+ "/bookmarks/find_entry?entryId=" + activity.getClassPK()
					+ "\r\n");
			
			if(BookmarksActivityKeys.ADD_ENTRY == type)
			{
				fWriter.write(tabs + "type: bookmark entry added\r\n");
			}
			else if(BookmarksActivityKeys.UPDATE_ENTRY == type)
			{
				fWriter.write(tabs + "type: bookmark entry updated\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown bookmarks entry event " + type + "\r\n");
			}
		}
		else if("com.liferay.portlet.bookmarks.model.BookmarksFolder".equals(className))
		{
			fWriter.write(tabs + "bookmark folder link: " + fServiceURL
					+ "/bookmarks/find_folder?folderId=" + activity.getClassPK()
					+ "\r\n");
			
			if(BookmarksActivityKeys.ADD_ENTRY == type)
			{
				fWriter.write(tabs + "type: bookmarks folder added\r\n");
			}
			else if(BookmarksActivityKeys.UPDATE_ENTRY == type)
			{
				fWriter.write(tabs + "type: bookmarks folder updated\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown bookmarks folder event " + type + "\r\n");
			}
		}
		//blogs
		else if("com.liferay.portlet.blogs.model.BlogsEntry".equals(className))
		{
			BlogsEntry blogEntry = BlogsEntryLocalServiceUtil.fetchBlogsEntry(
					activity.getClassPK());
			
			fWriter.write(tabs + "blog entry link: " + fServiceURL
					+ "/blogs/find_entry?entryId=" + activity.getClassPK()
					+ "\r\n");
			
//			if(BlogsActivityKeys.ADD_COMMENT == type)
			if(1 == type)
			{
				fWriter.write(tabs + "type: comment added to blog post\r\n");
			}
//			else if(BlogsActivityKeys.ADD_ENTRY == type)
			else if(2 == type)
			{
				fWriter.write(tabs + "type: blog entry added\r\n");
			}
//			else if(BlogsActivityKeys.UPDATE_ENTRY == type)
			else if(3 == type)
			{
				fWriter.write(tabs + "type: blog entry updated\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown blog event " + type + "\r\n");
			}
		}
		//document library
		else if("com.liferay.portlet.documentlibrary.model.DLFileEntry".equals(className))
		{
			FileEntry fileEntry = DLAppLocalServiceUtil.getFileEntry(
					activity.getClassPK());
			
			fWriter.write(tabs + "folder link: " + fServiceURL +
					"/document_library/find_folder?groupId=" + fileEntry.getRepositoryId() +
					"&folderId=" + fileEntry.getFolderId() +
					activity.getClassPK() + "\r\n");

			fWriter.write(tabs + "file link: " + fServiceURL +
					"/document_library/find_file_entry?fileEntryId=" +
					activity.getClassPK() + "\r\n");
			
//			if(DLActivityKeys.ADD_FILE_ENTRY == type)
			if(1 == type)
			{
				fWriter.write(tabs + "type: file entry added\r\n");
			}
//			else if(DLActivityKeys.UPDATE_FILE_ENTRY == type)
			else if(2 == type)
			{
				fWriter.write(tabs + "type: file entry updated\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown document library file event " + type + "\r\n");
			}
		}
		else if("com.liferay.portlet.documentlibrary.model.DLFolder".equals(className))
		{
			fWriter.write(tabs + "folder link: " + fServiceURL +
					"/document_library/find_folder?folderId=" +
					activity.getClassPK() + "\r\n");
			
//			if(DLActivityKeys.ADD_FILE_ENTRY == type)
			if(1 == type)
			{
				fWriter.write(tabs + "type: document library folder added\r\n");
			}
	//		else if(DLActivityKeys.UPDATE_FILE_ENTRY == type)
			else if(2 == type)
			{
				fWriter.write(tabs + "type: document library folder updated\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown document library folder event " + type + "\r\n");
			}
		}
		//wiki
		else if("com.liferay.portlet.wiki.model.WikiPage".equals(className))
		{
			WikiPageResource pageResource =
				WikiPageResourceLocalServiceUtil.fetchWikiPageResource(
						activity.getClassPK());
			
			fWriter.write(tabs + "resource page title: " + pageResource.getTitle() + "\r\n");
			
			double version = GetterUtil.getDouble(
				activity.getExtraDataValue("version"));
			
			fWriter.write(tabs + "version: " + version + "\r\n");

			WikiPage page = WikiPageLocalServiceUtil.fetchPage(
				pageResource.getNodeId(), pageResource.getTitle(), version);
			
			fWriter.write(tabs + "blog entry link: " + fServiceURL
					+ "/wiki/find_page?pageResourcePrimKey=" + activity.getClassPK()
					+ "\r\n");
			
			if(WikiActivityKeys.ADD_COMMENT == type)
			{
				fWriter.write(tabs + "type: comment added to wiki page\r\n");
			}
			else if(WikiActivityKeys.ADD_PAGE == type)
			{
				fWriter.write(tabs + "type: wiki page added\r\n");
			}
			else if(WikiActivityKeys.UPDATE_PAGE == type)
			{
				fWriter.write(tabs + "type: wiki page updated\r\n");
			}
			else
			{
				fWriter.write(tabs + "type: unknown wiki event " + type + "\r\n");
			}
			
			fWriter.write(tabs + "file entry title: " + activity.getExtraDataValue(
					"fileEntryTitle") + "\r\n");
		}
		else if("com.liferay.portlet.wiki.model.WikiNode".equals(className))
		{
			WikiNode node = WikiNodeLocalServiceUtil.fetchWikiNode(
					activity.getClassPK());

			fWriter.write(tabs + "nodeId: " + node.getNodeId() + "\r\n");
			fWriter.write(tabs + "name: " + node.getName() + "\r\n");
			fWriter.write(tabs + "description: " + node.getDescription() + "\r\n");
		}
		else
		{
			fWriter.write(tabs + "unknown class: " + className + "\r\n");
		}
		
		//generic types
		String genType = "unknown " + type;
		switch(type)
		{
			case SocialActivityConstants.TYPE_ADD_ATTACHMENT:
				genType = "attachment added";
				break;
				
			case SocialActivityConstants.TYPE_ADD_COMMENT:
				genType = "comment added";
				break;
				
			case SocialActivityConstants.TYPE_ADD_VOTE:
				genType = "vote added";
				break;
				
			case SocialActivityConstants.TYPE_DELETE:
				genType = "deleted";
				break;
				
			case SocialActivityConstants.TYPE_MOVE_ATTACHMENT_TO_TRASH:
				genType = "attachment moved to trash";
				break;
				
			case SocialActivityConstants.TYPE_MOVE_TO_TRASH:
				genType = "moved to trash";
				break;
				
			case SocialActivityConstants.TYPE_RESTORE_ATTACHMENT_FROM_TRASH:
				genType = "restored attachment from trash";
				break;
				
			case SocialActivityConstants.TYPE_RESTORE_FROM_TRASH:
				genType = "restored from trash";
				break;
				
			case SocialActivityConstants.TYPE_SUBSCRIBE:
				genType = "subscribed";
				break;
				
			case SocialActivityConstants.TYPE_UNSUBSCRIBE:
				genType = "unsubscribed";
				break;
				
			case SocialActivityConstants.TYPE_VIEW:
				genType = "viewed";
				break;
		}
		fWriter.write(tabs + "generic type: " + genType + "\r\n");
		
		//generic title
		fWriter.write(tabs + "generic title: " + activity.getExtraDataValue("title") + "\r\n");
	}
	
	public void writeSocialActivity(SocialActivity arg0, int indent) throws Exception
	{
		if(arg0 == null)
		{
			return;
		}
		
		//make some room
		++indent;
		fWriter.write("\r\n\r\n\r\n\r\n\r\n");
		
		final String tabs = getIndent(indent);

		fWriter.write(tabs + "feed entry:\r\n");
		writeActivityFeedEntry(arg0, indent + 1);
		
		fWriter.write(tabs + "activityId: " + arg0.getActivityId() + "\r\n");
		fWriter.write(tabs + "activitySetId: " + arg0.getActivitySetId() + "\r\n");
		fWriter.write(tabs + "className: " + arg0.getClassName() + "\r\n");
		fWriter.write(tabs + "classNameId: " + arg0.getClassNameId() + "\r\n");
		fWriter.write(tabs + "classPK: " + arg0.getClassPK() + "\r\n");
		
		fWriter.write(tabs + "companyId: " + arg0.getCompanyId() + "\r\n");
		fWriter.write(tabs + "--->company:\r\n");
		writeCompany(arg0.getCompanyId(), indent + 1);
		
		fWriter.write(tabs + "createDate: " + arg0.getCreateDate() + "\r\n");
		
		//extra data in JSON format for message generation
		fWriter.write(tabs + "extraData: " + arg0.getExtraData() + "\r\n");
		
		fWriter.write(tabs + "groupId: " + arg0.getGroupId() + "\r\n");
		fWriter.write(tabs + "-->group:\r\n");
		writeGroup(arg0.getGroupId(), indent + 1);
		
		fWriter.write(tabs + "mirrorActivityId: " + arg0.getMirrorActivityId() + "\r\n");
		fWriter.write(tabs + "modelClassName: " + arg0.getModelClassName() + "\r\n");
		fWriter.write(tabs + "parentClassNameId: " + arg0.getParentClassNameId() + "\r\n");
		fWriter.write(tabs + "parentClassPK: " + arg0.getParentClassPK() + "\r\n");
		fWriter.write(tabs + "primaryKey: " + arg0.getPrimaryKey() + "\r\n");
		
		fWriter.write(tabs + "receiverUserId: " + arg0.getReceiverUserId() + "\r\n");
		fWriter.write(tabs + "--->receiverUser:\r\n");
		writeUser(arg0.getReceiverUserId(), indent + 1);
		
		fWriter.write(tabs + "receiverUserUuid: " + arg0.getReceiverUserUuid() + "\r\n");
		fWriter.write(tabs + "type: " + arg0.getType() + "\r\n");
		
		fWriter.write(tabs + "userId: " + arg0.getUserId() + "\r\n");
		fWriter.write(tabs + "--->user:\r\n");
		writeUser(arg0.getUserId(), indent + 1);
		
		fWriter.write(tabs + "userUuid: " + arg0.getUserUuid() + "\r\n");
		
		if(arg0.getAssetEntry() != null)
		{
			fWriter.write("\t\tassetEntry:\r\n");
//			writeAssetEntry(arg0.getAssetEntry(), indent + 1);
		}
		
		if(arg0.getExpandoBridge() != null)
		{
			fWriter.write(tabs + "expandoBridge:\r\n");
			writeExpandoBridge(arg0.getExpandoBridge(), indent + 1);
		}
		
		if(arg0.getModelAttributes() != null && !arg0.getModelAttributes().isEmpty())
		{
			fWriter.write(tabs + "modelAttributes:\r\n");
			writeMap(arg0.getModelAttributes(), indent + 1);
		}
	}

	
//	private void writeAssetEntry(AssetEntry entry, int indent) throws Exception
//	{
//		final String tabs = getIndent(indent);
//		
//		fWriter.write(tabs + "className: " + entry.getClassName() + "\r\n");
//		fWriter.write(tabs + "classNameId: " + entry.getClassNameId() + "\r\n");
//		fWriter.write(tabs + "classPK: " + entry.getClassPK() + "\r\n");
//		fWriter.write(tabs + "classTypeId: " + entry.getClassTypeId() + "\r\n");
//		fWriter.write(tabs + "classUuid: " + entry.getClassUuid() + "\r\n");
//		
//		fWriter.write(tabs + "companyId: " + entry.getCompanyId() + "\r\n");
//		fWriter.write(tabs + "--->company:\r\n");
//		writeCompany(entry.getCompanyId(), indent + 1);
//		
//		fWriter.write(tabs + "defaultLanguageId: " + entry.getDefaultLanguageId() + "\r\n");
//		fWriter.write(tabs + "description: " + entry.getDescription() + "\r\n");
//		fWriter.write(tabs + "descriptionCurrentLanguageId: " + entry.getDescriptionCurrentLanguageId() + "\r\n");
//		fWriter.write(tabs + "descriptionCurrentValue: " + entry.getDescriptionCurrentValue() + "\r\n");
//		fWriter.write(tabs + "entryId: " + entry.getEntryId() + "\r\n");
//		
//		fWriter.write(tabs + "groupId: " + entry.getGroupId() + "\r\n");
//		fWriter.write(tabs + "-->group:\r\n");
//		writeGroup(entry.getGroupId(), indent + 1);
//		
//		fWriter.write(tabs + "height: " + entry.getHeight() + "\r\n");
//		fWriter.write(tabs + "layoutUuid: " + entry.getLayoutUuid() + "\r\n");
//		fWriter.write(tabs + "mimeType: " + entry.getMimeType() + "\r\n");
//		fWriter.write(tabs + "modelClassName: " + entry.getModelClassName() + "\r\n");
//		fWriter.write(tabs + "primaryKey: " + entry.getPrimaryKey() + "\r\n");
//		fWriter.write(tabs + "priority: " + entry.getPriority() + "\r\n");
//		fWriter.write(tabs + "summary: " + entry.getSummary() + "\r\n");
//		fWriter.write(tabs + "summaryCurrentLanguageId: " + entry.getSummaryCurrentLanguageId() + "\r\n");
//		fWriter.write(tabs + "summaryCurrentValue: " + entry.getSummaryCurrentValue() + "\r\n");
//		fWriter.write(tabs + "title: " + entry.getTitle() + "\r\n");
//		fWriter.write(tabs + "titleCurrentLanguageId: " + entry.getTitleCurrentLanguageId() + "\r\n");
//		fWriter.write(tabs + "titleCurrentValue: " + entry.getTitleCurrentValue() + "\r\n");
//		fWriter.write(tabs + "url: " + entry.getUrl() + "\r\n");
//		
//		fWriter.write(tabs + "userId: " + entry.getUserId() + "\r\n");
//		fWriter.write(tabs + "--->user:\r\n");
//		writeUser(entry.getUserId(), indent + 1);
//		
//		fWriter.write(tabs + "userName: " + entry.getUserName() + "\r\n");
//		fWriter.write(tabs + "userUuid: " + entry.getUserUuid() + "\r\n");
//		fWriter.write(tabs + "viewCount: " + entry.getViewCount() + "\r\n");
//		fWriter.write(tabs + "width: " + entry.getWidth() + "\r\n");
//
//		if(entry.getCategories() != null && !entry.getCategories().isEmpty())
//		{
//			fWriter.write(tabs + "categories:\r\n");
//			
//			List<AssetCategory> cats = entry.getCategories();
//			int i = 0;
//			for(AssetCategory cat : cats)
//			{
//				fWriter.write(tabs + "\tcategory " + ++i + ":\r\n");
//				writeAssetCategory(cat, indent + 2);
//			}
//		}
//		
//		fWriter.write(tabs + "createDate: " + entry.getCreateDate() + "\r\n");
//		
//		if(entry.getDescriptionMap() != null && !entry.getDescriptionMap().isEmpty())
//		{
//			fWriter.write(tabs + "descriptionMap:\r\n");
//			writeMap(entry.getDescriptionMap(), indent + 1); 
//		}
//
//		fWriter.write(tabs + "endDate: " + entry.getEndDate() + "\r\n");
//		fWriter.write(tabs + "expirationDate: " + entry.getExpirationDate() + "\r\n");
//		
//		if(entry.getModelAttributes() != null && !entry.getModelAttributes().isEmpty())
//		{
//			fWriter.write(tabs + "modelAttributes:\r\n");
//			writeMap(entry.getModelAttributes(), indent + 1);
//		}
//		
//		fWriter.write(tabs + "modifiedDate: " + entry.getModifiedDate() + "\r\n");
//		fWriter.write(tabs + "primaryKeyObj: " + entry.getPrimaryKeyObj() + "\r\n");
//		fWriter.write(tabs + "publishDate: " + entry.getPublishDate() + "\r\n");
//		fWriter.write(tabs + "startDate: " + entry.getStartDate() + "\r\n");
//		
//		if(entry.getSummaryMap() != null && !entry.getSummaryMap().isEmpty())
//		{
//			fWriter.write(tabs + "summaryMap:\r\n");
//			writeMap(entry.getSummaryMap(), indent + 1);
//		}
//
//		if(entry.getTagNames() != null)
//		{
//			fWriter.write(tabs + "tagNames: ");
//			for(String tag : entry.getTagNames())
//			{
//				fWriter.write(tag + ", ");
//			}
//			fWriter.write("\r\n");
//		}
//		
//		if(entry.getTags() != null && !entry.getTags().isEmpty())
//		{
//			fWriter.write(tabs + "tags:\r\n");
//			int i = 0;
//			for(AssetTag tag : entry.getTags())
//			{
//				fWriter.write(tabs + "\ttag " + ++i + ":\r\n");
//				writeTag(tag, indent + 2);
//			}
//		}
//		
//		if(entry.getTitleMap() != null && !entry.getTitleMap().isEmpty())
//		{
//			fWriter.write(tabs + "titleMap:\r\n");
//			writeMap(entry.getTitleMap(), indent + 1);
//		}
//		
//		if(entry.getExpandoBridge() != null)
//		{
//			fWriter.write(tabs + "expandoBridge:\r\n");
//			writeExpandoBridge(entry.getExpandoBridge(), indent + 1);
//		}
//	}
//	
//	private void writeAssetCategory(AssetCategory cat, int indent) throws Exception
//	{
//		final String tabs = getIndent(indent);
//		
//		fWriter.write(tabs + "categoryId: " + cat.getCategoryId() + "\r\n");
//		
//		fWriter.write(tabs + "companyId: " + cat.getCompanyId() + "\r\n");
//		fWriter.write(tabs + "--->company:\r\n");
//		writeCompany(cat.getCompanyId(), indent + 1);
//		
//		fWriter.write(tabs + "defaultLanguageId: " + cat.getDefaultLanguageId() + "\r\n");
//		fWriter.write(tabs + "description: " + cat.getDescription() + "\r\n");
//		fWriter.write(tabs + "descriptionCurrentLanguageId: " + cat.getDescriptionCurrentLanguageId() + "\r\n");
//		fWriter.write(tabs + "descriptionCurrentValue: " + cat.getDescriptionCurrentValue() + "\r\n");
//		
//		fWriter.write(tabs + "groupId: " + cat.getGroupId() + "\r\n");
//		fWriter.write(tabs + "-->group:\r\n");
//		writeGroup(cat.getGroupId(), indent + 1);
//		
//		fWriter.write(tabs + "leftCategoryId: " + cat.getLeftCategoryId() + "\r\n");
//		fWriter.write(tabs + "modelClassName: " + cat.getModelClassName() + "\r\n");
//		fWriter.write(tabs + "name: " + cat.getName() + "\r\n");
//		fWriter.write(tabs + "parentCategoryId: " + cat.getParentCategoryId() + "\r\n");
//		fWriter.write(tabs + "primaryKey: " + cat.getPrimaryKey() + "\r\n");
//		fWriter.write(tabs + "rightcategoryId: " + cat.getRightCategoryId() + "\r\n");
//		fWriter.write(tabs + "title: " + cat.getTitle() + "\r\n");
//		fWriter.write(tabs + "titleCurrentLanguageId: " + cat.getTitleCurrentLanguageId() + "\r\n");
//		fWriter.write(tabs + "titleCurrentValue: " + cat.getTitleCurrentValue() + "\r\n");
//		
//		fWriter.write(tabs + "userId: " + cat.getUserId() + "\r\n");
//		fWriter.write(tabs + "--->user:\r\n");
//		writeUser(cat.getUserId(), indent + 1);
//		
//		fWriter.write(tabs + "userName: " + cat.getUserName() + "\r\n");
//		fWriter.write(tabs + "userUuid: " + cat.getUserUuid() + "\r\n");
//		fWriter.write(tabs + "uuid: " + cat.getUuid() + "\r\n");
//		fWriter.write(tabs + "vocabularyId: " + cat.getVocabularyId() + "\r\n");
//		
//		if(cat.getAncestors() != null && !cat.getAncestors().isEmpty())
//		{
//			fWriter.write(tabs + "ancestors:\r\n");
//			int i = 0;
//			
//			for(AssetCategory subCat : cat.getAncestors())
//			{
//				fWriter.write(tabs + "ancestor " + ++i + ":\r\n");
//				writeAssetCategory(subCat, indent + 2);
//			}
//		}
//		
//		fWriter.write(tabs + "createDate: " + cat.getCreateDate() + "\r\n");
//		
//		if(cat.getDescriptionMap() != null && !cat.getDescriptionMap().isEmpty())
//		{
//			fWriter.write(tabs + "descriptionMap:\r\n");
//			writeMap(cat.getDescriptionMap(), indent + 1);
//		}
//
//		if(cat.getModelAttributes() != null && !cat.getModelAttributes().isEmpty())
//		{
//			fWriter.write(tabs + "modelAttributes:\r\n");
//			writeMap(cat.getModelAttributes(), indent + 1);
//		}
//		
//		fWriter.write(tabs + "modifiedDate: " + cat.getModifiedDate() + "\r\n");
//		fWriter.write(tabs + "primaryKeyObj: " + cat.getPrimaryKeyObj() + "\r\n");
//		
//		if(cat.getStagedModelType() != null)
//		{
//			fWriter.write(tabs + "stagedModelType_classSimpleName: " + cat.getStagedModelType().getClassSimpleName() + "\r\n");
//		}
//
//		if(cat.getTitleMap() != null && ! cat.getTitleMap().isEmpty())
//		{
//			fWriter.write(tabs + "titleMap:\r\n");
//			writeMap(cat.getTitleMap(), indent + 1);
//		}
//	}
//	
//	private void writeTag(AssetTag tag, int indent) throws Exception
//	{
//		final String tabs = getIndent(indent);
//
//		fWriter.write(tabs + "assetCount: " + tag.getAssetCount() + "\r\n");
//		
//		fWriter.write(tabs + "companyId: " + tag.getCompanyId() + "\r\n");
//		fWriter.write(tabs + "--->company:\r\n");
//		writeCompany(tag.getCompanyId(), indent + 1);
//		
//		fWriter.write(tabs + "groupId: " + tag.getGroupId() + "\r\n");
//		fWriter.write(tabs + "-->group:\r\n");
//		writeGroup(tag.getGroupId(), indent + 1);
//		
//		fWriter.write(tabs + "modelClassName: " + tag.getModelClassName() + "\r\n");
//		fWriter.write(tabs + "name: " + tag.getName() + "\r\n");
//		fWriter.write(tabs + "primaryKey: " + tag.getPrimaryKey() + "\r\n");
//		fWriter.write(tabs + "tagId: " + tag.getTagId() + "\r\n");
//		
//		fWriter.write(tabs + "userId: " + tag.getUserId() + "\r\n");
//		fWriter.write(tabs + "--->user:\r\n");
//		writeUser(tag.getUserId(), indent + 1);
//		
//		fWriter.write(tabs + "userName: " + tag.getUserName() + "\r\n");
//		fWriter.write(tabs + "userUuid: " + tag.getUserUuid() + "\r\n");
//		fWriter.write(tabs + "createDate: " + tag.getCreateDate() + "\r\n");
//		
//		if(tag.getExpandoBridge() != null)
//		{
//			fWriter.write(tabs + "expandoBridge:\r\n");
//			writeExpandoBridge(tag.getExpandoBridge(), indent + 1);
//		}
//
//		if(tag.getModelAttributes() != null && !tag.getModelAttributes().isEmpty())
//		{
//			fWriter.write(tabs + "modelAttributes:\r\n");
//			writeMap(tag.getModelAttributes(), indent + 1);
//		}
//		
//		fWriter.write(tabs + "modifiedDate: " + tag.getModifiedDate() + "\r\n");
//		fWriter.write(tabs + "primaryKeyObj: " + tag.getPrimaryKeyObj() + "\r\n");
//	}
	
	private void writeGroup(long groupId, int indent) throws Exception
	{
		final String tabs = getIndent(indent);
		Group group = GroupLocalServiceUtil.fetchGroup(groupId);
		
		if(group != null)
		{
			fWriter.write(tabs + "className: " + group.getClassName() + "\r\n");
			
			fWriter.write(tabs + "companyId: " + group.getCompanyId() + "\r\n");
			fWriter.write(tabs + "--->company:\r\n");
			writeCompany(group.getCompanyId(), indent + 1);
			
			fWriter.write(tabs + "creatorUserId: " + group.getCreatorUserId() + "\r\n");
			fWriter.write(tabs + "description: " + group.getDescription() + "\r\n");
			fWriter.write(tabs + "descriptiveName: " + group.getDescriptiveName() + "\r\n");
			fWriter.write(tabs + "friendlyURL: " + group.getFriendlyURL() + "\r\n");
			fWriter.write(tabs + "groupId: " + group.getGroupId() + "\r\n");
			fWriter.write(tabs + "membershipRestriction: " + group.getMembershipRestriction() + "\r\n");
			fWriter.write(tabs + "modelClassName: " + group.getModelClassName() + "\r\n");
			fWriter.write(tabs + "name: " + group.getName() + "\r\n");
			fWriter.write(tabs + "organizationId: " + group.getOrganizationId() + "\r\n");
			fWriter.write(tabs + "parentGroupId: " + group.getParentGroupId() + "\r\n");
			fWriter.write(tabs + "treePath: " + group.getTreePath() + "\r\n");
			fWriter.write(tabs + "type: " + group.getType() + "\r\n");
			fWriter.write(tabs + "typeLabel: " + group.getTypeLabel() + "\r\n");
			fWriter.write(tabs + "typeSettings: " + group.getTypeSettings() + "\r\n");
			
			if(group.getModelAttributes() != null && !group.getModelAttributes().isEmpty())
			{
				fWriter.write(tabs + "modelAttributes: \r\n");
				writeMap(group.getModelAttributes(), indent + 1);
			}
		}
	}
	
	private void writeUser(long userId, int indent) throws Exception
	{
		if(userId == 0)
		{
			return;
		}
		
		final String tabs = getIndent(indent);
		User user = null;
		
		try
		{
			user = UserLocalServiceUtil.fetchUser(userId);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			fWriter.write(tabs + "no user with this ID: " + userId + "\r\n");
		}
		
		if(user != null)
		{
			fWriter.write(tabs + "comments: " + user.getComments() + "\r\n");
			
			fWriter.write(tabs + "companyId: " + user.getCompanyId() + "\r\n");
			fWriter.write(tabs + "--->company:\r\n");
			writeCompany(user.getCompanyId(), indent + 1);
			
			fWriter.write(tabs + "companyMx: " + user.getCompanyMx() + "\r\n");
			fWriter.write(tabs + "contactId: " + user.getContactId() + "\r\n");
			fWriter.write(tabs + "digest: " + user.getDigest() + "\r\n");
			fWriter.write(tabs + "displayEmailAddress: " + user.getDisplayEmailAddress() + "\r\n");
			fWriter.write(tabs + "emailAddress: " + user.getEmailAddress() + "\r\n");
			fWriter.write(tabs + "facebookId: " + user.getFacebookId() + "\r\n");
			fWriter.write(tabs + "firstName: " + user.getFirstName() + "\r\n");
			fWriter.write(tabs + "fullName: " + user.getFullName() + "\r\n");
			fWriter.write(tabs + "greeting: " + user.getGreeting() + "\r\n");
			
			fWriter.write(tabs + "groupId: " + user.getGroupId() + "\r\n");
			fWriter.write(tabs + "-->group:\r\n");
			writeGroup(user.getGroupId(), indent + 1);

			fWriter.write(tabs + "jobTitle: " + user.getJobTitle() + "\r\n");
			fWriter.write(tabs + "languageId: " + user.getLanguageId() + "\r\n");
			fWriter.write(tabs + "lastName: " + user.getLastName() + "\r\n");
			fWriter.write(tabs + "ldapServerId: " + user.getLdapServerId() + "\r\n");
			fWriter.write(tabs + "login: " + user.getLogin() + "\r\n");
			fWriter.write(tabs + "middleName: " + user.getMiddleName() + "\r\n");
			fWriter.write(tabs + "modelClassName: " + user.getModelClassName() + "\r\n");
			fWriter.write(tabs + "openId: " + user.getOpenId() + "\r\n");
			fWriter.write(tabs + "screenName: " + user.getScreenName() + "\r\n");
			fWriter.write(tabs + "status: " + user.getStatus() + "\r\n");
		}
	}
	
	private void writeCompany(long companyId, int indent) throws Exception
	{
		final String tabs = getIndent(indent);
		Company company = CompanyLocalServiceUtil.fetchCompany(companyId);
		
		if(company != null)
		{
			fWriter.write(tabs + "accountId: " + company.getAccountId() + "\r\n");
			fWriter.write(tabs + "adminName: " + company.getAdminName() + "\r\n");
			fWriter.write(tabs + "authType: " + company.getAuthType() + "\r\n");
			fWriter.write(tabs + "defaultWebId: " + company.getDefaultWebId() + "\r\n");
			fWriter.write(tabs + "emailAddress: " + company.getEmailAddress() + "\r\n");
			fWriter.write(tabs + "groupId: " + company.getGroupId() + "\r\n");
			fWriter.write(tabs + "homeURL: " + company.getHomeURL() + "\r\n");
			fWriter.write(tabs + "key: " + company.getKey() + "\r\n");
			fWriter.write(tabs + "logoId: " + company.getLogoId() + "\r\n");
			fWriter.write(tabs + "modelClassName: " + company.getModelClassName() + "\r\n");
			fWriter.write(tabs + "mx: " + company.getMx() + "\r\n");
			fWriter.write(tabs + "name: " + company.getName() + "\r\n");
//			fWriter.write(tabs + "shardName: " + company.getShardName() + "\r\n");
			fWriter.write(tabs + "shortName: " + company.getShortName() + "\r\n");
			fWriter.write(tabs + "virtualHostName: " + company.getVirtualHostname() + "\r\n");
			fWriter.write(tabs + "webId: " + company.getWebId() + "\r\n");
			
			if(company.getModelAttributes() != null && !company.getModelAttributes().isEmpty())
			{
				fWriter.write(tabs + "modelAttributes:\r\n");
				writeMap(company.getModelAttributes(), indent + 1);
			}
		}
	}
	
	
	
	
	
	
	//Liferay methods
	@Override
	public void addActivity(SocialActivity activity, SocialActivity mirrorActivity)
			throws PortalException, SystemException
	{
		try
		{
			fWriter.write("addActivity(SocialActivity, SocialActivity):\r\n");
			
			if(activity != null)
			{
				fWriter.write("\tactivity:\r\n");
				
				writeSocialActivity(activity, 2);
			}
			
			if(mirrorActivity != null)
			{
				fWriter.write("\tmirrorActivity:\r\n");
				
				writeSocialActivity(mirrorActivity, 2);
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.addActivity(activity, mirrorActivity);
	}

	@Override
	public void addActivity(long userId, long groupId, String className,
			long classPK, int type, String extraData, long receiverUserId)
			throws PortalException, SystemException {
		
		try
		{
			fWriter.write("addActivity(long, long, String, long, int, String, long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			fWriter.write("\ttype: " + type + "\r\n");
			fWriter.write("\textraData: " + extraData + "\r\n");
			
			fWriter.write("\treceiverUserId: " + receiverUserId + "\r\n");
			fWriter.write("\t--->receiverUser:\r\n");
			writeUser(receiverUserId, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.addActivity(userId, groupId, className, classPK, type, extraData, receiverUserId);
	}

	@Override
	public void addActivity(long userId, long groupId, Date createDate,
			String className, long classPK, int type, String extraData,
			long receiverUserId) throws PortalException, SystemException {
		
		try
		{
			fWriter.write("addActivity(long, long, Date, String, long, int, String, long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			fWriter.write("\tcreateDate: " + createDate + "\r\n");
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + type + "\r\n");
			fWriter.write("\ttype: " + type + "\r\n");
			fWriter.write("\textraData: " + extraData + "\r\n");
			
			fWriter.write("\treceiverUserId: " + receiverUserId + "\r\n");
			fWriter.write("\t--->receiverUser:\r\n");
			writeUser(receiverUserId, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.addActivity(userId, groupId, createDate, className, classPK, type,
//				extraData, receiverUserId);
	}

	@Override
	public void addUniqueActivity(long userId, long groupId, String className,
			long classPK, int type, String extraData, long receiverUserId)
			throws PortalException, SystemException {
		
		try
		{
			fWriter.write("addUniqueActivity(long, long, String, long, int, String, long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			fWriter.write("\ttype: " + type + "\r\n");
			fWriter.write("\targ5: " + extraData + "\r\n");
			
			fWriter.write("\targ6: " + receiverUserId + "\r\n");
			fWriter.write("\t--->receiverUser:\r\n");
			writeUser(receiverUserId, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.addUniqueActivity(userId, groupId, className, classPK, type, extraData,
//				receiverUserId);
	}

	@Override
	public void addUniqueActivity(long userId, long groupId, Date createDate,
			String className, long classPK, int type, String extraData, long receiverUserId)
			throws PortalException, SystemException {
		
		try
		{
			fWriter.write("addUniqueActivity(long, long, Date, String, long, int, String, long):\r\n");

			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			fWriter.write("\tcreateDate: " + createDate + "\r\n");
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			fWriter.write("\ttype: " + type + "\r\n");
			fWriter.write("\textraData " + extraData + "\r\n");
			
			fWriter.write("\treceiverUserId: " + receiverUserId + "\r\n");
			fWriter.write("\t--->receiverUser:\r\n");
			writeUser(receiverUserId, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.addUniqueActivity(userId, groupId, createDate, className, classPK,
//				type, extraData, receiverUserId);
	}

//	@Override
//	public void deleteActivities(AssetEntry assetEntry) throws PortalException,
//			SystemException {
//		
//		try
//		{
//			fWriter.write("deleteActivities(AssetEntry):\r\n");
//
//			fWriter.write("\tassetEntry:\r\n");
//			writeAssetEntry(assetEntry, 2);
//			
//			fWriter.write("\r\n\r\n\r\n");
//			fWriter.flush();
//		}
//		catch(Exception e)
//		{
//			e.printStackTrace();
//		}
//		
////		super.deleteActivities(assetEntry);
//	}

	@Override
	public void deleteActivities(long groupId) throws SystemException {

		try
		{
			fWriter.write("deleteActivities(long):\r\n");
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.deleteActivities(groupId);
	}

	@Override
	public void deleteActivities(String className, long classPK)
			throws PortalException, SystemException {

		try
		{
			fWriter.write("deleteActivities(String, long):\r\n");
			
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.deleteActivities(className, classPK);
	}

	@Override
	public void deleteActivity(long activityId) throws PortalException,
			SystemException {
		try
		{
			fWriter.write("deleteActivity(long):\r\n");
			
			fWriter.write("\tactivityId: " + activityId + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.deleteActivity(activityId);
	}

	@Override
	public void deleteActivity(SocialActivity activity) throws PortalException,
			SystemException {
		
		try
		{
			fWriter.write("deleteActivity(SocialActivity):\r\n");
			
			fWriter.write("\tactivity:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.deleteActivity(activity);
	}

	@Override
	public void deleteUserActivities(long userId) throws PortalException,
			SystemException {
		
		try
		{
			fWriter.write("deleteUserActivities(long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
//		super.deleteUserActivities(userId);
	}

	@Override
	public SocialActivity fetchFirstActivity(String className, long classPK, int type)
			throws SystemException {
		
		SocialActivity activity = super.fetchFirstActivity(className, classPK, type);
		
		try
		{
			fWriter.write("fetchFirstActivity(String, long, int):\r\n");
			
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			fWriter.write("\ttype: " + type + "\r\n");
			
			if(activity != null)
			{
				fWriter.write("\treturn:\r\n");
				writeSocialActivity(activity, 2);
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public List<SocialActivity> getActivities(long classNameId, int start, int end)
			throws SystemException {
		
		List<SocialActivity> activities = super.getActivities(classNameId, start, end);
		
		try
		{
			fWriter.write("getActivities(long, int, int):\r\n");
			
			fWriter.write("\tclassNameId: " + classNameId + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\t\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getActivities(String className, int start, int end)
			throws SystemException {
		
		List<SocialActivity> activities = super.getActivities(className, start, end);
		
		try
		{
			fWriter.write("getActivities(String, int, int):\r\n");
			
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\t\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getActivities(long mirrorActivityId, long classNameId,
			long classPK, int start, int end) throws SystemException {
		
		List<SocialActivity> activities = super.getActivities(mirrorActivityId,
				classNameId, classPK, start, end);
		
		try
		{
			fWriter.write("getActivities(long, long, long, int, int):\r\n");
			
			fWriter.write("\tmirrorActivityId: " + mirrorActivityId + "\r\n");
			fWriter.write("\tclassNameId: " + classNameId + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getActivities(long mirrorActivityId, String className,
			long classPK, int start, int end) throws SystemException {
		
		List<SocialActivity> activities = super.getActivities(mirrorActivityId,
				className, classPK, start, end);
		
		try
		{
			fWriter.write("getActivities(long, String, long, int, int):\r\n");
			
			fWriter.write("\tmirrorActivityId: " + mirrorActivityId + "\r\n");
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getActivitiesCount(long classNameId) throws SystemException {
		
		int activities = super.getActivitiesCount(classNameId);
		
		try
		{
			fWriter.write("getActivitiesCount(long):\r\n");
			
			fWriter.write("\tclassNameId: " + classNameId + "\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getActivitiesCount(String className) throws SystemException {
		
		int activities = super.getActivitiesCount(className);
		
		try
		{
			fWriter.write("getActivitiesCount(String):\r\n");
			
			fWriter.write("\tclassName: " + className + "\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getActivitiesCount(long mirrorActivityId, long classNameId, long classPK)
			throws SystemException {
		
		int activities = super.getActivitiesCount(mirrorActivityId, classNameId,
				classPK);
		
		try
		{
			fWriter.write("getActivitiesCount(long, long, long):\r\n");
			
			fWriter.write("\tmirrorActivityId: " + mirrorActivityId + "\r\n");
			fWriter.write("\tclassNameId: " + classNameId + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getActivitiesCount(long mirrorActivityId, String className, long classPK)
			throws SystemException {
		
		int activities = super.getActivitiesCount(mirrorActivityId, className, classPK);
		
		try
		{
			fWriter.write("getActivitiesCount(long, String, long):\r\n");
			
			fWriter.write("\tmirrorActivityId: " + mirrorActivityId + "\r\n");
			fWriter.write("\tclassName: " + className + "\r\n");
			fWriter.write("\tclassPK: " + classPK + "\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public SocialActivity getActivity(long activityId) throws PortalException,
			SystemException {
		
		SocialActivity activity = super.getActivity(activityId);
		
		try
		{
			fWriter.write("getActivity(long):\r\n");
			
			fWriter.write("\tactivityId: " + activityId + "\r\n");
			
			if(activity != null)
			{
				fWriter.write("\treturn:\r\n");
				writeSocialActivity(activity, 2);
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public List<SocialActivity> getActivitySetActivities(long activitySetId, int start,
			int end) throws SystemException {
		
		List<SocialActivity> activities = super.getActivitySetActivities(activitySetId,
				start, end);
		
		try
		{
			fWriter.write("getActivitySetActivities(int, int, int):\r\n");
			
			fWriter.write("\tactivitySetId: " + activitySetId + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getGroupActivities(long groupId, int start, int end)
			throws SystemException {
		
		List<SocialActivity> activities = super.getGroupActivities(groupId, start, end);
		
		try
		{
			fWriter.write("getGroupActivities(long, int, int):\r\n");
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getGroupActivitiesCount(long groupId) throws SystemException {
		
		int activities = super.getGroupActivitiesCount(groupId);
		
		try
		{
			fWriter.write("getGroupActivitiesCount(long):\r\n");
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getGroupUsersActivities(long groupId, int start, int end)
			throws SystemException {
		
		List<SocialActivity> activities = super.getGroupUsersActivities(groupId, start, end);
		
		try
		{
			fWriter.write("getGroupUsersActivities(long, int, int):\r\n");
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\t\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getGroupUsersActivitiesCount(long groupId) throws SystemException {
		
		int activities = super.getGroupUsersActivitiesCount(groupId);
		
		try
		{
			fWriter.write("getGroupUsersActivitiesCount(long):\r\n");
			
			fWriter.write("\tgroupId: " + groupId + "\r\n");
			fWriter.write("\t-->group:\r\n");
			writeGroup(groupId, 2);
			
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public SocialActivity getMirrorActivity(long mirrorActivityId) throws PortalException,
			SystemException {
		
		SocialActivity activity = super.getMirrorActivity(mirrorActivityId);
		
		try
		{
			fWriter.write("getMirrorActivity(long):\r\n");
			
			fWriter.write("\tmirrorActivityId: " + mirrorActivityId + "\r\n");
			
			if(activity != null)
			{
				fWriter.write("\treturn:\r\n");
				writeSocialActivity(activity, 2);
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public List<SocialActivity> getOrganizationActivities(long organizationId,
			int start, int end) throws SystemException {
		
		List<SocialActivity> activities = super.getOrganizationActivities(
				organizationId, start, end);
		
		try
		{
			fWriter.write("getOrganizationActivities(long, int, int):\r\n");
			
			fWriter.write("\torganizationId: " + organizationId + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getOrganizationActivitiesCount(long organizationId) throws SystemException {
		
		int activities = super.getOrganizationActivitiesCount(organizationId);
		
		try
		{
			fWriter.write("getOrganizationActivitiesCount(long):\r\n");
			
			fWriter.write("\torganizationId: " + organizationId + "\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getOrganizationUsersActivities(long organizationId,
			int start, int end) throws SystemException {
		
		List<SocialActivity> activities = super.getOrganizationUsersActivities(organizationId,
				start, end);
		
		try
		{
			fWriter.write("getOrganizationUsersActivities(long, int, int):\r\n");
			
			fWriter.write("\torganizationId: " + organizationId + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getOrganizationUsersActivitiesCount(long organizationId)
			throws SystemException {
		
		int activities = super.getOrganizationActivitiesCount(organizationId);
		
		try
		{
			fWriter.write("getOrganizationUsersActivitiesCount(long):\r\n");
			
			fWriter.write("\torganizationId: " + organizationId + "\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getRelationActivities(long userId, int start,
			int end) throws SystemException {
		
		List<SocialActivity> activities = super.getRelationActivities(userId, start, end);
		
		try
		{
			fWriter.write("getRelationActivities(long, int, int):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getRelationActivities(long userId, int type,
			int start, int end) throws SystemException {
		
		List<SocialActivity> activities = super.getRelationActivities(userId,
				type, start, end);
		
		try
		{
			fWriter.write("getRelationActivities(long, int, int, int):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\ttype: " + type + "\r\n");
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getRelationActivitiesCount(long userId) throws SystemException {
		
		int activities = super.getRelationActivitiesCount(userId);
		
		try
		{
			fWriter.write("getRelationActivitiesCount(long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getRelationActivitiesCount(long userId, int type)
			throws SystemException {
		
		int activities = super.getRelationActivitiesCount(userId, type);
		
		try
		{
			fWriter.write("getRelationActivitiesCount(long, int):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\ttype: " + type + "\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getUserActivities(long userId, int start, int end)
			throws SystemException {
		
		List<SocialActivity> activities = super.getUserActivities(userId, start, end);
		
		try
		{
			fWriter.write("getUserActivities(long, int, int):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\t\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getUserActivitiesCount(long userId) throws SystemException {
		
		int activities = super.getUserActivitiesCount(userId);
		
		try
		{
			fWriter.write("getUserActivitiesCount(long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getUserGroupsActivities(long userId, int start,
			int end) throws SystemException {
		
		List<SocialActivity> activities = super.getUserGroupsActivities(userId,
				start, end);
		
		try
		{
			fWriter.write("getUserGroupsActivities(long, int, int):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getUserGroupsActivitiesCount(long userId) throws SystemException {
		
		int activities = super.getUserGroupsActivitiesCount(userId);
		
		try
		{
			fWriter.write("getUserGroupsActivitiesCount(long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getUserGroupsAndOrganizationsActivities(
			long userId, int start, int end) throws SystemException {
		
		List<SocialActivity> activities = super.getUserGroupsAndOrganizationsActivities(
				userId, start, end);
		
		try
		{
			fWriter.write("getUserGroupsAndOrganizationsActivities(long, int, int):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getUserGroupsAndOrganizationsActivitiesCount(long userId)
			throws SystemException {
		
		int activities = super.getUserGroupsAndOrganizationsActivitiesCount(userId);
		
		try
		{
			fWriter.write("getUserGroupsAndOrganizationsActivitiesCount(long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public List<SocialActivity> getUserOrganizationsActivities(long userId,
			int start, int end) throws SystemException {
		
		List<SocialActivity> activities = super.getUserOrganizationsActivities(userId,
				start, end);
		
		try
		{
			fWriter.write("getUserOrganizationsActivities(long, int, int):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getUserOrganizationsActivitiesCount(long userId)
			throws SystemException {
		
		int activities = super.getUserOrganizationsActivitiesCount(userId);
		
		try
		{
			fWriter.write("getUserOrganizationsActivitiesCount(long):\r\n");
			
			fWriter.write("\tuserId: " + userId + "\r\n");
			fWriter.write("\t--->user:\r\n");
			writeUser(userId, 2);
			
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public SocialActivity addSocialActivity(SocialActivity socialActivity)
			throws SystemException {
		
		SocialActivity activity = super.addSocialActivity(socialActivity);
		
		try
		{
			fWriter.write("addSocialActivity(SocialActivity):\r\n");
			
			fWriter.write("\tsocialActivity:\r\n");
			writeSocialActivity(socialActivity, 2);
			
			fWriter.write("\treturn:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public SocialActivity createSocialActivity(long activityId) {
		
		SocialActivity activity = super.createSocialActivity(activityId);
		
		try
		{
			fWriter.write("createSocialActivity(long):\r\n");
			
			fWriter.write("\tactivityId: " + activityId + "\r\n");
			
			fWriter.write("\treturn:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public SocialActivity deleteSocialActivity(long activityId)
			throws PortalException, SystemException {
		
		SocialActivity activity = super.deleteSocialActivity(activityId);
		
		try
		{
			fWriter.write("deleteSocialActivity(long):\r\n");
			
			fWriter.write("\tactivityId: " + activityId + "\r\n");
			
			fWriter.write("\treturn:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public SocialActivity deleteSocialActivity(SocialActivity socialActivity)
			throws SystemException {
		
		SocialActivity activity = super.deleteSocialActivity(socialActivity);
		
		try
		{
			fWriter.write("deleteSocialActivity(SocialActivity):\r\n");
			
			fWriter.write("\tsocialActivity:\r\n");
			writeSocialActivity(socialActivity, 2);
			
			fWriter.write("\treturn:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public SocialActivity fetchSocialActivity(long activityId) throws SystemException {

		SocialActivity activity = super.fetchSocialActivity(activityId);
		
		try
		{
			fWriter.write("deleteSocialActivity(long):\r\n");
			
			fWriter.write("\tactivityId: " + activityId + "\r\n");
			
			fWriter.write("\treturn:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public List<SocialActivity> getSocialActivities(int start, int end)
			throws SystemException {
		
		List<SocialActivity> activities = super.getSocialActivities(start, end);
		
		try
		{
			fWriter.write("getSocialActivities(int, int):\r\n");
			
			fWriter.write("\tstart: " + start + "\r\n");
			fWriter.write("\tend: " + end + "\r\n");
			
			if(activities != null && !activities.isEmpty())
			{
				fWriter.write("\treturn:\r\n");
				int i = 0;
				
				for(SocialActivity activity : activities)
				{
					fWriter.write("\tactivity " + ++i + ":\r\n");
					writeSocialActivity(activity, 3);
				}
			}
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activities;
	}

	@Override
	public int getSocialActivitiesCount() throws SystemException {
		
		int activities = super.getSocialActivitiesCount();
		
		try
		{
			fWriter.write("getSocialActivitiesCount():\r\n");
			
			fWriter.write("\treturn: " + activities + "\r\n");
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		return activities;
	}

	@Override
	public SocialActivity getSocialActivity(long activityId) throws PortalException,
			SystemException {
		
		SocialActivity activity = super.getSocialActivity(activityId);
		
		try
		{
			fWriter.write("getSocialActivity(long):\r\n");
			
			fWriter.write("\tactivityId: " + activityId + "\r\n");
			
			fWriter.write("\treturn:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

	@Override
	public SocialActivity updateSocialActivity(SocialActivity socialActivity)
			throws SystemException {
		
		SocialActivity activity = super.updateSocialActivity(socialActivity);
		
		try
		{
			fWriter.write("updateSocialActivity(SocialActivity):\r\n");
			
			fWriter.write("\tsocialActivity:\r\n");
			writeSocialActivity(socialActivity, 2);
			
			fWriter.write("\treturn:\r\n");
			writeSocialActivity(activity, 2);
			
			fWriter.write("\r\n\r\n\r\n");
			fWriter.flush();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return activity;
	}

//	@Override
//	public DynamicQuery dynamicQuery() {
//		return null;
//	}

//	@Override
//	public List dynamicQuery(DynamicQuery arg0) throws SystemException {
//		return null;
//	}
//
//	@Override
//	public List dynamicQuery(DynamicQuery arg0, int arg1, int arg2)
//			throws SystemException {
//		return null;
//	}
//
//	@Override
//	public List dynamicQuery(DynamicQuery arg0, int arg1, int arg2,
//			OrderByComparator arg3) throws SystemException {
//		return null;
//	}
//
//	@Override
//	public long dynamicQueryCount(DynamicQuery arg0) throws SystemException {
//		return 0;
//	}
//
//	@Override
//	public long dynamicQueryCount(DynamicQuery arg0, Projection arg1)
//			throws SystemException {
//		return 0;
//	}

//	@Override
//	public String getBeanIdentifier() {
//		return null;
//	}

//	@Override
//	public PersistedModel getPersistedModel(Serializable arg0)
//			throws PortalException, SystemException {
//		return null;
//	}

//	@Override
//	public void setBeanIdentifier(String arg0) {
//		
//	}

}
